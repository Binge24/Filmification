
import de.javasoft.plaf.synthetica.SyntheticaBlackMoonLookAndFeel;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Binge2
 */
public class FilmificationGUI extends javax.swing.JFrame {

    private ArrayList<JLabel> screenshots = new ArrayList<JLabel>();
    private Random rnd = new Random();
    private String ins;
    private int numOfImages;
    private int currentIndex;
    private Timer t;

    public FilmificationGUI() throws UnsupportedLookAndFeelException, ParseException {
        UIManager.setLookAndFeel(new SyntheticaBlackMoonLookAndFeel());

        initComponents();

        //pls fix
        //setNumOfImages(11); //Jacobi
        setNumOfImages(6); //Multistage Network

        setExtendedState(JFrame.MAXIMIZED_BOTH);

        prevButton.setEnabled(false);
        nextButton.setEnabled(false);
        playButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        elementTypeButtonGroup = new javax.swing.ButtonGroup();
        rightPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        playButton = new javax.swing.JButton();
        frameNumberLabel = new javax.swing.JLabel();
        frameNumberTextField = new javax.swing.JTextField();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        leftTabbedPane = new javax.swing.JTabbedPane();
        filmsPanel = new javax.swing.JPanel();
        filmsScrollPane = new javax.swing.JScrollPane();
        filmsTree = new javax.swing.JTree();
        filesPanel = new javax.swing.JPanel();
        filesScrollPane = new javax.swing.JScrollPane();
        filesTree = new javax.swing.JTree();
        viewPanel = new javax.swing.JPanel();
        tileViewScrollPane = new javax.swing.JScrollPane();
        tileViewPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        tileViewButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        fullViewButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFilmMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Filmification");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Jacobi Relaxation Technique");

        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        frameNumberLabel.setText("Frame Number:");

        frameNumberTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        frameNumberTextField.setFocusable(false);

        prevButton.setText("Prev");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(frameNumberLabel)
                            .addGroup(rightPanelLayout.createSequentialGroup()
                                .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(frameNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(frameNumberLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frameNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(89, 89, 89)
                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        filmsScrollPane.setViewportView(filmsTree);

        javax.swing.GroupLayout filmsPanelLayout = new javax.swing.GroupLayout(filmsPanel);
        filmsPanel.setLayout(filmsPanelLayout);
        filmsPanelLayout.setHorizontalGroup(
            filmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filmsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        filmsPanelLayout.setVerticalGroup(
            filmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filmsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
        );

        leftTabbedPane.addTab("Films", filmsPanel);

        filesTree.setDragEnabled(true);
        filesScrollPane.setViewportView(filesTree);

        javax.swing.GroupLayout filesPanelLayout = new javax.swing.GroupLayout(filesPanel);
        filesPanel.setLayout(filesPanelLayout);
        filesPanelLayout.setHorizontalGroup(
            filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
        );
        filesPanelLayout.setVerticalGroup(
            filesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
        );

        leftTabbedPane.addTab("Files", filesPanel);

        tileViewPanel.setLayout(new java.awt.GridLayout(1, 0));
        tileViewScrollPane.setViewportView(tileViewPanel);

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tileViewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
                .addContainerGap())
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tileViewScrollPane)
                .addContainerGap())
        );

        tileViewButton.setText("Tile View");
        tileViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tileViewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tileViewButton)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(tileViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        fullViewButton.setText("Full View");
        fullViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullViewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fullViewButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(fullViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileMenu.setText("Film");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        openFilmMenuItem.setText("Open Film");
        openFilmMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFilmMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openFilmMenuItem);
        fileMenu.add(jSeparator1);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rightPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftTabbedPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(viewPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(7, 7, 7)))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1034, 573));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openFilmMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFilmMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openFilmMenuItemActionPerformed


    private void tileViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tileViewButtonActionPerformed
        /* //jacobi
         try 
         {
         initScreenshots(getNumOfImages(), "screenshots", "5x5jrt", "png", true);
         } catch (URISyntaxException ex) 
         {
         Logger.getLogger(FilmificationGUI.class.getName()).log(Level.SEVERE, null, ex);
         }
        
         addScreenshotsTileView(5, 3);
         */
        //Multistage Network
        try {
            initScreenshots(getNumOfImages(), "screenshots", getListOfImages(), "png", true);
        } catch (URISyntaxException ex) {
            Logger.getLogger(FilmificationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        addScreenshotsTileView(2, 2);
    }//GEN-LAST:event_tileViewButtonActionPerformed

    private void fullViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullViewButtonActionPerformed
        tileViewPanel.setLayout(new java.awt.GridLayout(1, 1));

        setCurrentIndex(0);
        frameNumberTextField.setText(String.valueOf(getCurrentIndex() + 1) + "/"
                + getNumOfImages());

        prevButton.setEnabled(false);
        nextButton.setEnabled(true);
        playButton.setEnabled(true);

        /* //Jacobi
         try 
         {
         initScreenshots(getNumOfImages(), "screenshots", "5x5jrt", "png", false);
         } catch (URISyntaxException ex) 
         {
         Logger.getLogger(FilmificationGUI.class.getName()).log(Level.SEVERE, null, ex);
         }
         */
        //Multistage Network
        try {
            initScreenshots(getNumOfImages(), "screenshots", getListOfImages(), "png", false);
        } catch (URISyntaxException ex) {
            Logger.getLogger(FilmificationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        addScreenshotsFullView(0);
    }//GEN-LAST:event_fullViewButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        if (getCurrentIndex() > 0) {
            addScreenshotsFullView(getCurrentIndex() - 1);
            setCurrentIndex(getCurrentIndex() - 1);
            frameNumberTextField.setText(String.valueOf(getCurrentIndex() + 1) + "/"
                    + getNumOfImages());
        }

        updatePrevAndNext();
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (getCurrentIndex() < getNumOfImages()) {
            addScreenshotsFullView(getCurrentIndex() + 1);
            setCurrentIndex(getCurrentIndex() + 1);
            frameNumberTextField.setText(String.valueOf(getCurrentIndex() + 1) + "/"
                    + getNumOfImages());
        }

        updatePrevAndNext();
    }//GEN-LAST:event_nextButtonActionPerformed

    public void updatePrevAndNext() {
        if (getCurrentIndex() < (getNumOfImages() - 1)) {
            nextButton.setEnabled(true);
        } else {
            nextButton.setEnabled(false);
        }

        if (getCurrentIndex() > 0) {
            prevButton.setEnabled(true);
        } else {
            prevButton.setEnabled(false);
        }
    }

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        tileViewPanel.setLayout(new java.awt.GridLayout(1, 1));

        setCurrentIndex(0);
        prevButton.setEnabled(false);
        nextButton.setEnabled(false);
        playButton.setEnabled(false);

        JComponent myComponent = tileViewPanel;

        final Timer timer = new Timer(1500, null);
        timer.start();

        timer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                if (getCurrentIndex() == getScreenshots().size() - 1) {
                    timer.stop();

                    playButton.setEnabled(true);
                    updatePrevAndNext();
                }

                tileViewPanel.removeAll();
                tileViewPanel.add(getScreenshots().get(getCurrentIndex()));
                frameNumberTextField.setText(String.valueOf(getCurrentIndex() + 1) + "/"
                        + getNumOfImages());
                setCurrentIndex(getCurrentIndex() + 1);

                myComponent.revalidate();
                myComponent.repaint();
            }
        });
    }//GEN-LAST:event_playButtonActionPerformed

    //Jacobi
    public void initScreenshots(int numOfImages, String folder,
            String filenameStart, String fileExtension, boolean isTileView) throws URISyntaxException {
        getScreenshots().clear();

        for (int i = 1; i <= numOfImages; i++) {
            BufferedImage img = null;
            try {
                String path = "/" + folder + "/" + filenameStart + i + "." + fileExtension;
                img = ImageIO.read(new File(getClass().getResource(path).toURI()));
            } catch (IOException e) {
                e.printStackTrace();
            }

            JLabel label = new JLabel();

            if (isTileView) {
                label.setSize(300, 210);
                label.setText("JRT Frame Number " + i);

                if (i == 1 || i == 2 || i == 11) {
                    screenshots.add(new JLabel());
                }
            } else {
                label.setSize(800, 560);
            }

            img = toBufferedImage(img.getScaledInstance(label.getWidth(),
                    label.getHeight(), Image.SCALE_SMOOTH));

            ImageIcon imageIcon = new ImageIcon(img);
            label.setIcon(imageIcon);

            label.setHorizontalTextPosition(JLabel.CENTER);
            label.setVerticalTextPosition(JLabel.BOTTOM);
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

            screenshots.add(label);
        }
    }

    //Multistage Network
    public void initScreenshots(int numOfImages, String folder,
            ArrayList<String> filename, String fileExtension, boolean isTileView) throws URISyntaxException {
        getScreenshots().clear();

        for (int i = 0; i < numOfImages; i++) {
            BufferedImage img = null;
            try {
                String path = "/" + folder + "/" + filename.get(i) + "." + fileExtension;
                img = ImageIO.read(new File(getClass().getResource(path).toURI()));
            } catch (IOException e) {
                e.printStackTrace();
            }

            JLabel label = new JLabel();

            if (isTileView) {
                label.setSize(300, 210);
                if (i == 0) {
                    label.setText("Start - Starting Row: " + (Integer.parseInt("" + filename.get(i + 1).charAt(6)) + 1) + 
                            " +  Instruction: " + ins);
                } else if (i == numOfImages - 1) {
                    label.setText("Multistage Network film " + i + " - End");
                } else if (filename.get(i).contains("decide")) {
                    label.setText("Multistage Network film " + i + " - Instruction: " + ins.charAt((i / 2) - 1));
                } else {
                    label.setText("Multistage Network film " + i);
                }

            } else {
                label.setSize(800, 560);
            }

            img = toBufferedImage(img.getScaledInstance(label.getWidth(),
                    label.getHeight(), Image.SCALE_SMOOTH));

            ImageIcon imageIcon = new ImageIcon(img);
            label.setIcon(imageIcon);

            label.setHorizontalTextPosition(JLabel.CENTER);
            label.setVerticalTextPosition(JLabel.BOTTOM);
            label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

            screenshots.add(label);
        }
    }

    public static BufferedImage toBufferedImage(Image img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }

        // Create a buffered image with transparency
        BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

        // Draw the image on to the buffered image
        Graphics2D bGr = bimage.createGraphics();
        bGr.drawImage(img, 0, 0, null);
        bGr.dispose();

        // Return the buffered image
        return bimage;
    }

    public void addScreenshotsTileView(int rows, int columns) {
        tileViewPanel.removeAll();

        tileViewPanel.setLayout(new java.awt.GridLayout(rows, columns));

        for (int i = 0; i < getScreenshots().size(); i++) {
            tileViewPanel.add(getScreenshots().get(i));
        }

        tileViewPanel.revalidate();
        tileViewPanel.repaint();
    }

    public void addScreenshotsFullView(int index) {
        tileViewPanel.removeAll();

        tileViewPanel.add(getScreenshots().get(index));

        tileViewPanel.revalidate();
        tileViewPanel.repaint();
    }

    //Codes needed for Multistage Network
    public int createRowStart() {
        return rnd.nextInt(4);
    }

    public void createInstruction() {
        ins = Integer.toString(rnd.nextInt(2)) + Integer.toString(rnd.nextInt(2));
        //System.out.println("ins created: " + ins);
    }

    public ArrayList<String> getListOfImages() {
        ArrayList<String> list = new ArrayList();
        int start = createRowStart();
        createInstruction();

        list.add("base");
        list.add("input0" + Integer.toString(start));
        list.add("decide0" + Integer.toString(start));

        if (ins.charAt(0) == '0') {
            list.add("input1" + Integer.toString(start));
            list.add("decide1" + Integer.toString(start));
            if (ins.charAt(1) == '0') {
                list.add("input2" + Integer.toString(start));
            } else {
                switch (start) {
                    case 0:
                        list.add("input21");
                        break;
                    case 1:
                        list.add("input20");
                        break;
                    case 2:
                        list.add("input23");
                        break;
                    case 3:
                        list.add("input22");
                        break;
                }
            }
        } else {
            if (start < 2) {
                list.add("input1" + Integer.toString(start + 2));
                list.add("decide1" + Integer.toString(start + 2));
                if (ins.charAt(1) == '0') {
                    list.add("input2" + Integer.toString(start + 2));
                } else {
                    if (start == 1) {
                        list.add("input22");
                    } else {
                        list.add("input23");
                    }
                }
            } else {
                list.add("input1" + Integer.toString(start - 2));
                list.add("decide1" + Integer.toString(start - 2));
                if (ins.charAt(1) == '0') {
                    list.add("input2" + Integer.toString(start - 2));
                } else {
                    if (start == 3) {
                        list.add("input20");
                    } else {
                        list.add("input21");
                    }
                }
            }
        }
        return list;
    }

    // --------------- getters and setters --------------- //
    public ArrayList<JLabel> getScreenshots() {
        return screenshots;
    }

    public void setScreenshots(ArrayList<JLabel> screenshots) {
        this.screenshots = screenshots;
    }

    public int getNumOfImages() {
        return numOfImages;
    }

    public void setNumOfImages(int numOfImages) {
        this.numOfImages = numOfImages;
    }

    public int getCurrentIndex() {
        return currentIndex;
    }

    public void setCurrentIndex(int currentIndex) {
        this.currentIndex = currentIndex;
    }

    public Timer getT() {
        return t;
    }

    public void setT(Timer t) {
        this.t = t;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup elementTypeButtonGroup;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel filesPanel;
    private javax.swing.JScrollPane filesScrollPane;
    private javax.swing.JTree filesTree;
    private javax.swing.JPanel filmsPanel;
    private javax.swing.JScrollPane filmsScrollPane;
    private javax.swing.JTree filmsTree;
    private javax.swing.JLabel frameNumberLabel;
    private javax.swing.JTextField frameNumberTextField;
    private javax.swing.JButton fullViewButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane leftTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openFilmMenuItem;
    private javax.swing.JButton playButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton tileViewButton;
    private javax.swing.JPanel tileViewPanel;
    private javax.swing.JScrollPane tileViewScrollPane;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
}
